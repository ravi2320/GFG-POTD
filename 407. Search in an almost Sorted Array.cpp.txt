/*
Search in an almost Sorted Array
Difficulty: MediumAccuracy: 55.44%Submissions: 14K+Points: 4Average Time: 20m
Given a sorted integer array arr[] consisting of distinct elements, where some elements of the array are moved to either of the adjacent positions, i.e. arr[i] may be present at arr[i-1] or arr[i+1].
Given an integer target.  You have to return the index ( 0-based ) of the target in the array. If target is not present return -1.

Examples:

Input: arr[] = [10, 3, 40, 20, 50, 80, 70], target = 40
Output: 2
Explanation: Index of 40 in the given array is 2.
Input: arr[] = [10, 3, 40, 20, 50, 80, 70], target = 90
Output: -1
Explanation: 90 is not present in the array.
Input: arr[] = [-20], target = -20
Output: 0
Explanation: -20 is the only element present in the array.
Constraints:
1 <= arr.size() <= 105
-109 <= arr[i] <= 109
*/

/*
Approach:
- This is a variation of binary search for a **nearly sorted array**, 
  where each element may be misplaced by at most 1 index from its sorted position.
- So, for each `mid`, we check:
   1. arr[mid]
   2. arr[mid - 1] (if in bounds)
   3. arr[mid + 1] (if in bounds)
- Based on comparison, we adjust the search range by skipping two indices (since target cannot be in between mid and midÂ±1).

Intuition:
- Standard binary search checks one mid element, but here we need to account for possible swaps with neighbors.

Time Complexity: O(log N), due to modified binary search.
Space Complexity: O(1), no extra space used.
*/

class Solution {
public:
    int findTarget(vector<int>& arr, int target) {
        int n = arr.size();
        int low = 0, high = n - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is the target
            if (arr[mid] == target) return mid;

            // Check left neighbor
            if (mid > low && arr[mid - 1] == target) return mid - 1;

            // Check right neighbor
            if (mid < high && arr[mid + 1] == target) return mid + 1;

            // Adjust search range by skipping 2 positions
            if (arr[mid] < target) {
                low = mid + 2;
            } else {
                high = mid - 2;
            }
        }

        // Target not found
        return -1;
    }
};
